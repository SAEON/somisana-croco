name: get regional data to force the models

on:
  workflow_call:
    inputs:
      RUNNER_NAME:
        description: 'specify the runner name to determine what server we are running on'
        required: true
        type: string
      RUN_DATE:
        description: 'time of T0 of the model run - defined dynamically in run_ops.yml'
        required: true
        type: string
      BRANCH_REF:
        description: 'what branch are we on - defined dynamically in run_ops.yml'
        required: true
        type: string
      HDAYS:
        description: 'number of hindcast days (integer) from T0'
        required: true
        type: string
      FDAYS:
        description: 'number of forecast days (integer) from T0'
        required: true
        type: string

env:
  DATA_DIR: /home/somisana/ops/${{ inputs.BRANCH_REF }}/downloaded_data/${{ inputs.RUN_DATE }}

jobs:
  cleanup-old-dirs:
    runs-on: ${{ inputs.RUNNER_NAME }}
    continue-on-error: true
    steps:
      - name: Clean /home/somisana/ops/${{ inputs.BRANCH_REF }}/downloaded_data
        run: >-
          find \
            /home/somisana/ops/${{ inputs.BRANCH_REF }}/downloaded_data/* \
            -maxdepth 1 \
            -type d \
            -ctime +5 \
            -exec \
              rm \
                -rf {} \;

  mercator:
    runs-on: ${{ inputs.RUNNER_NAME }}
    steps:
      - name: Format RUN_DATE
        id: format_date
        run: |
          run_date=${{ inputs.RUN_DATE }}
          run_date_formatted="'${run_date:0:4}-${run_date:4:2}-${run_date:6:2} ${run_date:9:2}:00:00'"
          echo "value=$run_date_formatted" >> $GITHUB_OUTPUT
      - name: create the MERCATOR directory
        run: |
          rm -rf ${{ env.DATA_DIR }}/MERCATOR
          mkdir -p ${{ env.DATA_DIR }}/MERCATOR
          chown -R :runners ${{ env.DATA_DIR }}/MERCATOR
          chmod -R 774 ${{ env.DATA_DIR }}/MERCATOR
      - name: download MERCATOR
        uses: nick-fields/retry@master
        with:
          timeout_minutes: 60 # Script is considered failed if this limit is reached
          retry_wait_seconds: 300 # Wait 5 minutes and try again
          max_attempts: 10
          retry_on: any
          warning_on_retry: true
          shell: bash
          continue_on_error: false
          on_retry_command: rm -f ${{ env.DATA_DIR }}/MERCATOR/*mercator*
          command: >-
            docker run \
              --rm \
              -v ${{ env.DATA_DIR }}/MERCATOR:/tmp \
              ghcr.io/saeon/somisana-croco_cli_${{ inputs.BRANCH_REF }}:latest \
              download_mercator \
                --usrname ${{ secrets.COPERNICUS_USERNAME }} \
                --passwd ${{ secrets.COPERNICUS_PASSWORD }} \
                --domain 11,36,-39,-25 \
                --run_date ${{ steps.format_date.outputs.value }} \
                --hdays ${{ inputs.HDAYS }} \
                --fdays ${{ inputs.FDAYS }} \
                --outputDir '/tmp'

  gfs:
    runs-on: ${{ inputs.RUNNER_NAME }}
    steps:
      - name: Format RUN_DATE
        id: format_date
        run: |
          run_date=${{ inputs.RUN_DATE }}
          run_date_formatted="'${run_date:0:4}-${run_date:4:2}-${run_date:6:2} ${run_date:9:2}:00:00'"
          echo "value=$run_date_formatted" >> $GITHUB_OUTPUT
      - name: create the GFS directory
        run: |
          rm -rf ${{ env.DATA_DIR }}/GFS
          mkdir -p ${{ env.DATA_DIR }}/GFS/for_croco
          chown -R :runners ${{ env.DATA_DIR }}/GFS
          chmod -R 774 ${{ env.DATA_DIR }}/GFS
      - name: Download GFS atmospheric data
        uses: nick-fields/retry@master
        with:
          timeout_minutes: 60 # Script is considered failed if this limit is reached
          retry_wait_seconds: 300 # Wait 5 minutes and try again
          max_attempts: 10
          retry_on: any
          warning_on_retry: true
          shell: bash
          continue_on_error: false
          on_retry_command: rm -f ${{ env.DATA_DIR }}/GFS/*grb*
          command: >-
            docker run \
              --rm \
              -v ${{ env.DATA_DIR }}/GFS:/tmp \
              ghcr.io/saeon/somisana-croco_cli_${{ inputs.BRANCH_REF }}:latest \
              download_gfs_atm \
                --domain 11,36,-39,-25 \
                --run_date ${{ steps.format_date.outputs.value }} \
                --hdays ${{ inputs.HDAYS }} \
                --fdays ${{ inputs.FDAYS }} \
                --outputDir '/tmp'
      - name: prepare a single netcdf file from the downloaded grb files
        run: >-
          docker run \
            --rm \
            --mac-address 02:42:ff:ff:ff:ff \
            --entrypoint /bin/bash \
            -v /opt/licenses/matlab-r2022a/license.lic:/licenses/license.lic \
            -v ${{ env.DATA_DIR }}/GFS:/home/matlab \
            -e MLM_LICENSE_FILE=/licenses/license.lic \
            ghcr.io/saeon/somisana-croco_matlab_${{ inputs.BRANCH_REF }}:latest \
            -c "cd /home/matlab && matlab -nodisplay -nosplash -nodesktop -r 'addpath(genpath(\'/somisana-croco/crocotools_mat\')); reformat_GFS(2000); exit;'"
            #-c "cd /home/matlab && cp /somisana-croco/crocotools_mat/fcst/start_GFS.m && matlab -nodisplay -nosplash -nodesktop -r 'start_GFS; reformat_GFS(2000); exit;'"

#  setup-dirs:
#    runs-on: ${{ inputs.RUNNER_NAME }}
#    env:
#      DATA_DIR: /home/somisana/ops/${{ inputs.BRANCH_REF }}/downloaded_data/${{ inputs.RUN_DATE }}
#    steps:
#      - name: create the GFS directory
#        run: |
#          rm -rf ${{ env.DATA_DIR }}/GFS
#          mkdir -p ${{ env.DATA_DIR }}/GFS
#          chown -R :runners ${{ env.DATA_DIR }}/GFS
#          chmod -R 774 ${{ env.DATA_DIR }}/GFS
#      - name: create the MERCATOR directory
#        run: |
#          rm -rf ${{ env.DATA_DIR }}/MERCATOR
#          mkdir -p ${{ env.DATA_DIR }}/MERCATOR
#          chown -R :runners ${{ env.DATA_DIR }}/MERCATOR
#          chmod -R 774 ${{ env.DATA_DIR }}/MERCATOR
#
#  download-data:
#    needs: [setup-dirs]
#    runs-on: ${{ inputs.RUNNER_NAME }}
#    env:
#      DATA_DIR: /home/somisana/ops/${{ inputs.BRANCH_REF }}/downloaded_data/${{ inputs.RUN_DATE }}
#    steps:
#      - name: Format RUN_DATE
#        id: format_date
#        run: |
#          run_date=${{ inputs.RUN_DATE }}
#          run_date_formatted="'${run_date:0:4}-${run_date:4:2}-${run_date:6:2} ${run_date:9:2}:00:00'"
#          echo "value=$run_date_formatted" >> $GITHUB_OUTPUT
#      - name: Download GFS atmospheric data
#        uses: nick-fields/retry@master
#        with:
#          timeout_minutes: 60 # Script is considered failed if this limit is reached
#          retry_wait_seconds: 300 # Wait 5 minutes and try again
#          max_attempts: 10
#          retry_on: any
#          warning_on_retry: true
#          shell: bash
#          continue_on_error: false
#          on_retry_command: rm -f ${{ env.DATA_DIR }}/GFS/*grb*
#          command: >-
#            docker run \
#              --rm \
#              -v ${{ env.DATA_DIR }}/GFS:/tmp \
#              ghcr.io/saeon/somisana-croco_cli_${{ inputs.BRANCH_REF }}:latest \
#              download_gfs_atm \
#                --domain 11,36,-39,-25 \
#                --run_date ${{ steps.format_date.outputs.value }} \
#                --hdays ${{ inputs.HDAYS }} \
#                --fdays ${{ inputs.FDAYS }} \
#                --outputDir '/tmp'
#      - name: download MERCATOR
#        uses: nick-fields/retry@master
#        with:
#          timeout_minutes: 60 # Script is considered failed if this limit is reached
#          retry_wait_seconds: 300 # Wait 5 minutes and try again
#          max_attempts: 10
#          retry_on: any
#          warning_on_retry: true
#          shell: bash
#          continue_on_error: false
#          on_retry_command: rm -f ${{ env.DATA_DIR }}/MERCATOR/*mercator*
#          command: >-
#            docker run \
#              --rm \
#              -v ${{ env.DATA_DIR }}/MERCATOR:/tmp \
#              ghcr.io/saeon/somisana-croco_cli_${{ inputs.BRANCH_REF }}:latest \
#              download_mercator \
#                --usrname ${{ secrets.COPERNICUS_USERNAME }} \
#                --passwd ${{ secrets.COPERNICUS_PASSWORD }} \
#                --domain 11,36,-39,-25 \
#                --run_date ${{ steps.format_date.outputs.value }} \
#                --hdays ${{ inputs.HDAYS }} \
#                --fdays ${{ inputs.FDAYS }} \
#                --outputDir '/tmp'
