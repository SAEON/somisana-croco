name: download regional ogcm data to force the models

on:
  workflow_call:
    inputs:
      RUNNER_NAME:
        description: 'specify the runner name to determine what server we are running on'
        required: true
        type: string
      RUN_DATE:
        description: 'time of T0 of the model run - defined dynamically in run_ops.yml'
        required: true
        type: string
      BRANCH_REF:
        description: 'what branch are we on - defined dynamically in run_ops.yml'
        required: true
        type: string
      OGCM:
        description: 'name of boundary forcing e.g. MERCATOR' 
        required: true
        type: string
      HDAYS:
        description: 'number of hindcast days (integer) from T0'
        required: true
        type: string
      FDAYS:
        description: 'number of forecast days (integer) from T0'
        required: true
        type: string

env:
  DATA_DIR: /home/somisana/ops/${{ inputs.BRANCH_REF }}/${{ inputs.RUN_DATE }}/downloaded_data

jobs:
  check_files:
    # checks to see if files have maybe already been downloaded as part of a previous running of this workflow
    runs-on: ${{ inputs.RUNNER_NAME }}
    outputs:
      OGCM_OK: ${{ steps.check_ogcm.outputs.value }}
    steps:
        id: check_ogcm
        run: |
          FILE_PATH=${{ env.DATA_DIR }}/${{ inputs.OGCM }}/${{ inputs.OGCM }}_${{ inputs.RUN_DATE }}.nc
          # could have an additional check on file size here?
          if [ -f "$FILE_PATH" ]; then
            echo "value=1" >> $GITHUB_OUTPUT
          else
            echo "value=0" >> $GITHUB_OUTPUT
          fi

  mercator_saeon:
    # we have had an issue with downloading from copernicus specifically on the mims network
    # it seems this is something idiosyncratic to the mims network and the copernicusmarine cli at the time of testing
    # so for now we are just downloading on the saeon-apps server, and moving to the shared
    # samba mount which is accessible on from both the saeon and mimms servers
    # we can come back to this when we have the server issue sorted (or if later versions of 
    # the copernicusmarine tool works better on this network)
    # then this job can be deleted and the commented download step in the mercator job can be used
    runs-on: saeonapps
    needs: [check_files]
    if: ${{ needs.check_files.outputs.OGCM_OK == '0' && inputs.OGCM == 'MERCATOR' }}
    steps:
      - name: Format RUN_DATE
        id: format_date
        run: |
          run_date=${{ inputs.RUN_DATE }}
          run_date_formatted="'${run_date:0:4}-${run_date:4:2}-${run_date:6:2} ${run_date:9:2}:00:00'"
          echo "value=$run_date_formatted" >> $GITHUB_OUTPUT
      - name: download MERCATOR
        uses: nick-fields/retry@master
        with:
          timeout_minutes: 60 # Script is considered failed if this limit is reached
          retry_wait_seconds: 300 # Wait 5 minutes and try again
          max_attempts: 3
          retry_on: any
          warning_on_retry: true
          shell: bash
          continue_on_error: false
          on_retry_command: sudo rm -f /home/giles/mercator_download/*nc
          command: |
            docker run \
              --rm \
              -v /home/giles/mercator_download:/tmp/download \
              ghcr.io/saeon/somisana-croco_cli_${{ inputs.BRANCH_REF }}:latest \
              download_mercator \
                --usrname ${{ secrets.COPERNICUS_USERNAME }} \
                --passwd ${{ secrets.COPERNICUS_PASSWORD }} \
                --domain 11,36,-39,-25 \
                --run_date ${{ steps.format_date.outputs.value }} \
                --hdays ${{ inputs.HDAYS }} \
                --fdays ${{ inputs.FDAYS }} \
                --outputDir '/tmp/download'
            # copy to a shared dir
            cp /home/giles/mercator_download/MERCATOR_${{ inputs.RUN_DATE }}.nc /mnt/somisana/data/
      - name: clean up files on saeonapps
        run: |
          # this is a terrible hack I know...
          # The cli wouldn't run as a non-root user due to permissions issues on saeonapps (even though I did try to get around this in visudo)
          # so the output from the cli in owned by root, making it hard to clean up as a non-root user operationally
          # so I'm using the cli docker image to remove the files it originally created
          docker run \
            --rm \
            --entrypoint /bin/bash \
            -v /home/giles/mercator_download/:/mnt/tmp \
            ghcr.io/saeon/somisana-croco_cli_${{ inputs.BRANCH_REF }}:latest \
              -c "rm -f /mnt/tmp/*nc"

  mercator:
    runs-on: ${{ inputs.RUNNER_NAME }}
    needs: [check_files,mercator_saeon]
    if: ${{ always() && needs.check_files.outputs.OGCM_OK == '0' && inputs.OGCM == 'MERCATOR' }}
    steps:
      - name: create the MERCATOR directory
        run: |
          if [ ! -d "${{ env.DATA_DIR }}/MERCATOR" ]; then
            mkdir -p ${{ env.DATA_DIR }}/MERCATOR
            chown -R :runners ${{ env.DATA_DIR }}/MERCATOR
            chmod -R 774 ${{ env.DATA_DIR }}/MERCATOR
          fi
      - name: move downloaded file from the shared mount
        # we only need this since we have the workaround of downloading on saeonapps
        # so this essentially replaces the commented download code below
        run: |
          # We need to use sudo in the line below because the mounted dir is owned by root
          sudo mv /mnt/saeon-somisana/data/MERCATOR_${{ inputs.RUN_DATE }}.nc ${{ env.DATA_DIR }}/MERCATOR/
#      - name: Format RUN_DATE
#        id: format_date
#        run: |
#          run_date=${{ inputs.RUN_DATE }}
#          run_date_formatted="'${run_date:0:4}-${run_date:4:2}-${run_date:6:2} ${run_date:9:2}:00:00'"
#          echo "value=$run_date_formatted" >> $GITHUB_OUTPUT
# see comments in mercator_saeon job as to why this download is commented here
#      - name: download MERCATOR
#        uses: nick-fields/retry@master
#        with:
#          timeout_minutes: 60 # Script is considered failed if this limit is reached
#          retry_wait_seconds: 300 # Wait 5 minutes and try again
#          max_attempts: 10
#          retry_on: any
#          warning_on_retry: true
#          shell: bash
#          continue_on_error: false
#          on_retry_command: sudo rm -f ${{ env.DATA_DIR }}/MERCATOR/*mercator*
#          command: >-
#            docker run \
#              --user $(id -u):$(id -g) \
#              --rm \
#              -v ${{ env.DATA_DIR }}/MERCATOR:/tmp \
#              ghcr.io/saeon/somisana-croco_cli_${{ inputs.BRANCH_REF }}:latest \
#              download_mercator \
#                --usrname ${{ secrets.COPERNICUS_USERNAME }} \
#                --passwd ${{ secrets.COPERNICUS_PASSWORD }} \
#                --domain 11,36,-39,-25 \
#                --run_date ${{ steps.format_date.outputs.value }} \
#                --hdays ${{ inputs.HDAYS }} \
#                --fdays ${{ inputs.FDAYS }} \
#                --outputDir '/tmp'

  # Download hycom 
  hycom:
    runs-on: ${{ inputs.RUNNER_NAME }}
    needs: [check_files]
    if: ${{ needs.check_files.outputs.OGCM_OK == '0' && inputs.OGCM == 'HYCOM' }}
    steps:
      - name: Format RUN_DATE
        id: format_date
        run: |
          run_date=${{ inputs.RUN_DATE }}
          run_date_formatted="'${run_date:0:4}-${run_date:4:2}-${run_date:6:2} ${run_date:9:2}:00:00'"
          echo "value=$run_date_formatted" >> $GITHUB_OUTPUT
      - name: create the HYCOM directory
        run: |
          sudo rm -rf ${{ env.DATA_DIR }}/HYCOM
          mkdir -p ${{ env.DATA_DIR }}/HYCOM
          chown -R :runners ${{ env.DATA_DIR }}/HYCOM
          chmod -R 774 ${{ env.DATA_DIR }}/HYCOM
      - name: Download HYCOM
        uses: nick-fields/retry@master
        with:
          timeout_minutes: 60 # Script is considered failed if this limit is reached
          retry_wait_seconds: 300 # Wait 5 minutes and try again
          max_attempts: 10
          retry_on: any
          warning_on_retry: true
          shell: bash
          continue_on_error: false
          on_retry_command: sudo rm -f ${{ env.DATA_DIR }}/HYCOM/*.nc
          command: |
            docker run \
              --user $(id -u):$(id -g) \
              --rm \
              -v ${{ env.DATA_DIR }}/HYCOM:/tmp \
              ghcr.io/saeon/somisana-croco_cli_${{ inputs.BRANCH_REF }}:latest \
              download_hycom \
                --domain 11,36,-39,-25 \
                --run_date ${{ steps.format_date.outputs.value }} \
                --hdays ${{ inputs.HDAYS }} \
                --fdays ${{ inputs.FDAYS }} \
                --savedir '/tmp/'

  archive_ocims:
    # copy the data to an archive directory on ocims infrastructure, mounted to the mims compute server
    needs: [hycom]
    runs-on: ${{ inputs.RUNNER_NAME }}
    # only archive if we are on the main branch
    if: ${{ always() && inputs.BRANCH_REF == 'main' }}
    continue-on-error: true
    steps:
      - name: archive forcing files on ocims infrastructure
        id: archive_dir
        run: |
          # get the archive directory name
          run_date=${{ inputs.RUN_DATE }}
          run_date_yyyymm=${run_date:0:6}
          run_date_hh=${run_date:9:2}
          archive_dir=/mnt/ocims-somisana/sa-forcing/${run_date_yyyymm}/${run_date}
          # make the archive directory
          if [ ! -d ${archive_dir} ]; then
            sudo mkdir -p ${archive_dir}/${{ inputs.OGCM }}
          fi
          # only archive one run per day (initialised at 00)
          # the archiving is really for validation purposes, and I think one run per day is sufficient for this
          if [ "${run_date_hh}" == "00" ]; then 
            # We need to use sudo in the lines below because the target dir is owned by root
            # Not an issue since we have ensured no password is needed for this command 
            sudo cp ${{ env.DATA_DIR }}/${{ inputs.OGCM }}/${{ inputs.OGCM }}_${{ inputs.RUN_DATE }}.nc ${archive_dir}/${{ inputs.OGCM }}/
          fi
