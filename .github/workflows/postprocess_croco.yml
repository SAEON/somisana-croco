name: postprocess croco run

on:
  workflow_call:
    inputs:
      RUN_DATE:
        description: 'time of T0 of the model run in format YYYYMMDD_HH - defined dynamically in run_ops.yml'
        required: true
        type: string
      BRANCH_REF:
        description: 'what branch are we on - defined dynamically in run_ops.yml'
        required: true
        type: string
      RUNNER_NAME:
        description: 'specify the runner name to determine what server we are running on'
        required: true
        type: string
      MODEL:
        description: 'directory name used to define the model e.g.croco_v1.3.1'
        required: true
        type: string
      DOMAIN:
        description: 'directory name used to define the domain e.g. sa_west_02' 
        required: true
        type: string
      VERSION:
        description: 'the version used in the archiving directory e.g. v1.0 (this is intended to handle major changes to the model in the forecasts)' 
        required: true
        type: string
      COMP:
        description: 'directory corresponding to the CROCO compilation options e.g. C01' 
        required: true
        type: string
      INP:
        description: 'directory corresponding to the CROCO run-time input options e.g. I01' 
        required: true
        type: string
      BLK:
        description: 'name of bulk forcing e.g. GFS' 
        required: true
        type: string
      TIDE_FRC:
        description: 'name of tidal forcing e.g. TPXO10' 
        required: true
        type: string
      OGCM:
        description: 'name of boundary forcing e.g. MERCATOR' 
        required: true
        type: string
      HDAYS:
        description: 'number of hindcast days (integer) from T0'
        required: true
        type: string
      FDAYS:
        description: 'number of forecast days (integer) from T0'
        required: true
        type: string

env:
  # define the directory names for this configuration
  # unfortunately it looks like you can't use vars defined here to define others i.e. you can't use {{ env.* }} inside this block, you have to use {{ inputs.* }} for each var
  BRANCH_DIR: /home/somisana/ops/${{ inputs.BRANCH_REF }}
  CONFIG_DIR: /home/somisana/ops/${{ inputs.BRANCH_REF }}/${{ inputs.RUN_DATE }}/${{ inputs.DOMAIN }}/${{ inputs.MODEL }}
  RUN_DIR: /home/somisana/ops/${{ inputs.BRANCH_REF }}/${{ inputs.RUN_DATE }}/${{ inputs.DOMAIN }}/${{ inputs.MODEL }}/${{ inputs.COMP }}_${{ inputs.INP }}_${{ inputs.OGCM }}_${{ inputs.BLK }}_${{ inputs.TIDE_FRC }}

jobs:
  # postprocess the raw croco output files into something more user-friendly
  postprocess:
    runs-on: ${{ inputs.RUNNER_NAME }}
    steps:
      - name: subset the raw CROCO NetCDF file for archiving
        continue-on-error: true
        run: |
          # we only want to archive the nowcast to forecast, so we chop off the hindcast part of the output
          # this is dependent on the avg output frequency, which we read from the myenv_in.sh file
          source ${{ env.CONFIG_DIR }}/${{ inputs.INP }}/myenv_in.sh
          HINDCAST_DAYS=${{ inputs.HDAYS }}
          HINDCAST_HOURS=$((HINDCAST_DAYS * 24))
          HINDCAST_NUMAVG=$((HINDCAST_HOURS / NH_AVG)) # NH_AVG is read from myenv_in.sh - it's the output frequency (in hours) of the avg file
          ncks -v temp,salt,u,v,w,zeta,sustr,svstr -d time,${HINDCAST_NUMAVG}, -O ${{ env.RUN_DIR }}/output/croco_avg.nc ${{ env.RUN_DIR }}/postprocess/croco_avg_frcst.nc"
      # Regrid CROCO u,v to rho grid,
      # rotate u,v components from grid aligned to east/north aligned and
      # work out depth levels of sigma grid in meters (tier 1)
      - name: Tier 1 regridding
        continue-on-error: true
        run: |
          #docker run \
          #  --memory=35g \
          #  --cpus=1 \
          #  --user $(id -u):$(id -g) \
          #  --rm \
          #  -v ${{ env.RUN_DIR }}:/tmp \
          #  ghcr.io/saeon/somisana-croco_cli_${{ inputs.BRANCH_REF }}:latest \
          #    regrid_tier1 \
          #      --fname /tmp/output/croco_avg.nc \
          #      --dir_out /tmp/postprocess/ \
          #      --Yorig 2000
          source /home/somisana/miniforge3/etc/profile.d/conda.sh          
          conda activate somisana_croco
          python /home/somisana/code/somisana-croco/cli.py \
              regrid_tier1 \
                --fname ${{ env.RUN_DIR }}/output/croco_avg.nc \
                --dir_out ${{ env.RUN_DIR }}/postprocess/ \
                --Yorig 2000
      # interpolate data to constant vertical levels (tier 2)
      - name: Tier 2 regridding
        continue-on-error: true
        run: |
          #docker run \
          #  --memory=35g \
          #  --cpus=1 \
          #  --user $(id -u):$(id -g) \
          #  --rm \
          #  -v ${{ env.RUN_DIR }}:/tmp \
          #  ghcr.io/saeon/somisana-croco_cli_${{ inputs.BRANCH_REF }}:latest \
          #    regrid_tier2 \
          #      --fname /tmp/output/croco_avg.nc \
          #      --dir_out /tmp/postprocess/ \
          #      --depths 0,-5,-10,-50,-100,-500,-1000
          source /home/somisana/miniforge3/etc/profile.d/conda.sh          
          conda activate somisana_croco
          python /home/somisana/code/somisana-croco/cli.py \
              regrid_tier2 \
                --fname ${{ env.RUN_DIR }}/output/croco_avg.nc \
                --dir_out ${{ env.RUN_DIR }}/postprocess/ \
                --depths 0,-5,-10,-50,-100,-500,-1000
      # and interpolate data to a constant horizontal grid (tier 3)
      - name: Tier 3 regridding
        continue-on-error: true
        run: |
          #docker run \
          #  --memory=10g \
          #  --cpus=1 \
          #  --user $(id -u):$(id -g) \
          #  --rm \
          #  -v ${{ env.RUN_DIR }}:/tmp \
          #  ghcr.io/saeon/somisana-croco_cli_${{ inputs.BRANCH_REF }}:latest \
          #    regrid_tier3 \
          #      --fname /tmp/postprocess/croco_avg_t2.nc \
          #      --dir_out /tmp/postprocess/ \
          #      --spacing 0.02
          source /home/somisana/miniforge3/etc/profile.d/conda.sh          
          conda activate somisana_croco
          python /home/somisana/code/somisana-croco/cli.py \
              regrid_tier3 \
                --fname ${{ env.RUN_DIR }}/postprocess/croco_avg_t2.nc \
                --dir_out ${{ env.RUN_DIR }}/postprocess/ \
                --spacing 0.02
        
      # here we can add the extraction of time-series 
      # for this there needs to be an ascii file for each config_dir with the coordinates and names of the time-series locations

  # make plots/animations of the outout
  plotting:
    runs-on: ${{ inputs.RUNNER_NAME }}
    steps:
      - name: animate surface temperature and currents
        continue-on-error: true
        run: |
          #docker run \
          #  --memory=10g \
          #  --cpus=1 \
          #  --rm \
          #  -v ${{ env.RUN_DIR }}:/tmp \
          #  ghcr.io/saeon/somisana-croco_cli_${{ inputs.BRANCH_REF }}:latest \
          #    crocplot \
          #      --fname /tmp/output/croco_avg.nc \
          #      --gif_out /tmp/postprocess/croco_avg_temp_surf.gif \
          #      --skip_time 6 \
          #      --Yorig 2000
          #sudo chown somisana:somisana ${{ env.RUN_DIR }}/postprocess/croco_avg_temp_surf.gif
          source /home/somisana/miniforge3/etc/profile.d/conda.sh          
          conda activate somisana_croco
          python /home/somisana/code/somisana-croco/cli.py \
              crocplot \
                --fname ${{ env.RUN_DIR }}/output/croco_avg.nc \
                --gif_out ${{ env.RUN_DIR }}/postprocess/croco_avg_temp_surf.gif \
                --skip_time 6 \
                --Yorig 2000
      - name: animate bottom temperature and currents
        continue-on-error: true
        run: |
          #docker run \
          #  --memory=10g \
          #  --cpus=1 \
          #  --rm \
          #  -v ${{ env.RUN_DIR }}:/tmp \
          #  ghcr.io/saeon/somisana-croco_cli_${{ inputs.BRANCH_REF }}:latest \
          #    crocplot \
          #      --fname /tmp/output/croco_avg.nc \
          #      --level 0 \
          #      --gif_out /tmp/postprocess/croco_avg_temp_bot.gif \
          #      --skip_time 6 \
          #      --Yorig 2000
          #sudo chown somisana:somisana ${{ env.RUN_DIR }}/postprocess/croco_avg_temp_bot.gif
          source /home/somisana/miniforge3/etc/profile.d/conda.sh          
          conda activate somisana_croco
          python /home/somisana/code/somisana-croco/cli.py \
              crocplot \
                --fname ${{ env.RUN_DIR }}/output/croco_avg.nc \
                --level 0 \
                --gif_out ${{ env.RUN_DIR }}/postprocess/croco_avg_temp_bot.gif \
                --skip_time 6 \
                --Yorig 2000
      - name: animate 100m temperature and currents
        continue-on-error: true
        run: |
          #docker run \
          #  --memory=10g \
          #  --cpus=1 \
          #  --rm \
          #  -v ${{ env.RUN_DIR }}:/tmp \
          #  ghcr.io/saeon/somisana-croco_cli_${{ inputs.BRANCH_REF }}:latest \
          #    crocplot \
          #      --fname /tmp/output/croco_avg.nc \
          #      --level -100 \
          #      --gif_out /tmp/postprocess/croco_avg_temp_100m.gif \
          #      --skip_time 6 \
          #      --Yorig 2000
          #sudo chown somisana:somisana ${{ env.RUN_DIR }}/postprocess/croco_avg_temp_100m.gif
          source /home/somisana/miniforge3/etc/profile.d/conda.sh          
          conda activate somisana_croco
          python /home/somisana/code/somisana-croco/cli.py \
              crocplot \
                --fname ${{ env.RUN_DIR }}/output/croco_avg.nc \
                --level -100 \
                --gif_out ${{ env.RUN_DIR }}/postprocess/croco_avg_temp_100m.gif \
                --skip_time 6 \
                --Yorig 2000
      - name: ensure permissions
        run: |
          chmod -R 775 ${{ env.RUN_DIR }}

  # copy data over to where it will be archived
  archive:
    needs: [postprocess,plotting]
    runs-on: ${{ inputs.RUNNER_NAME }}
    # only archive if we are on the main branch
    if: ${{ inputs.BRANCH_REF == 'main' && inputs.RUNNER_NAME == 'mims1' }}
    steps:
      - name: get archive dir
        id: archive_dir
        run: |
          run_date=${{ inputs.RUN_DATE }}
          run_date_yyyymm=${run_date:0:6}
          # cut off the last three characters of the domain name for the archive directory e.g. the *_02 part
          domain=$(echo ${{ inputs.DOMAIN }} | sed 's/...$//')
          # replace underscores with hyphens for the archive directory - probably looks better
          domain=${domain//_/-}
          #
          archive_dir=/mnt/ocims-somisana/${domain}/${{ inputs.VERSION }}/forecasts/${run_date_yyyymm}/${run_date}/${{ inputs.OGCM }}-${{ inputs.BLK }}
          echo "value=$archive_dir" >> $GITHUB_OUTPUT
      - name: copy files to the archive directory if needed
        run: |
          if [ ! -d ${{ steps.archive_dir.outputs.value }} ]; then
            sudo mkdir -p ${{ steps.archive_dir.outputs.value }}
            sudo chmod -R 775 ${{ steps.archive_dir.outputs.value }}
          fi
          # apparently we need sudo permissions to copy to the archive directory
          # we have set up the somisana user to be able to do this without the need for a password
          sudo cp ${{ env.RUN_DIR }}/postprocess/croco_avg_t1.nc ${{ steps.archive_dir.outputs.value }}
          sudo cp ${{ env.RUN_DIR }}/postprocess/croco_avg_t2.nc ${{ steps.archive_dir.outputs.value }}
          sudo cp ${{ env.RUN_DIR }}/postprocess/croco_avg_t3.nc ${{ steps.archive_dir.outputs.value }}
          sudo cp ${{ env.RUN_DIR }}/output/croco_avg.nc ${{ steps.archive_dir.outputs.value }}
          sudo cp ${{ env.RUN_DIR }}/postprocess/croco_avg_frcst.nc ${{ steps.archive_dir.outputs.value }}
          sudo cp ${{ env.RUN_DIR }}/postprocess/croco_avg_temp_surf.gif ${{ steps.archive_dir.outputs.value }}
          sudo cp ${{ env.RUN_DIR }}/postprocess/croco_avg_temp_bot.gif ${{ steps.archive_dir.outputs.value }}
          sudo cp ${{ env.RUN_DIR }}/postprocess/croco_avg_temp_100m.gif ${{ steps.archive_dir.outputs.value }}
          
      - name: clean up
        run: |
          # the .nc files we previously copied files from elsewhere into the scratch directory are redundant
          # (it's useful to just dump them in scratch but are just copies so we don't need to keep them at all)
          sudo rm -f ${{ env.RUN_DIR }}/scratch/*.nc
 
