name: build and push docker image

on:
  workflow_call:
    inputs:
      # which image are we building? IMAGE_ID can either be `cli`, `matlab`, or `run`
      IMAGE_ID:
        required: true
        type: string

env:
  REGISTRY: ghcr.io

jobs:
  # Set the cli image name using the current branch reference
  envs:
    runs-on: ubuntu-latest
    outputs:
      BRANCH_REF: ${{ steps.BRANCH_REF.outputs.value }}
      IMAGE_NAME: ${{ steps.ENVS.outputs.IMAGE_NAME }}
    steps:
      # Dynamically set the branch ref to the currently executing branch
      - name: Set the BRANCH_REF
        id: BRANCH_REF
        run: |
          echo "value=${GITHUB_REF##*/}" >> $GITHUB_OUTPUT
      - name: Set envs
        id: ENVS
        run: |
          echo "IMAGE_NAME=${{ env.REGISTRY }}/${{ github.repository }}_${{ inputs.IMAGE_ID }}_${{ steps.BRANCH_REF.outputs.value }}" >> $GITHUB_OUTPUT

  build-and-push-image:
    needs: [envs]
    runs-on: ubuntu-latest
    env:
      BRANCH_REF: ${{ needs.envs.outputs.BRANCH_REF }}
      IMAGE_NAME: ${{ needs.envs.outputs.IMAGE_NAME }}
      SHA: sha-${{ github.sha }}
    outputs:
      image: ${{ env.IMAGE_NAME }}:${{ env.SHA }}
    # Sets the permissions granted to the `GITHUB_TOKEN` for the actions in this job.
    permissions:
      contents: read
      packages: write
      # 
    steps:
      - name: Check out source code
        uses: actions/checkout@main # change to main
        with:
          ref: ${{ env.BRANCH_REF }}
      - name: Log in to the Container registry
        uses: docker/login-action@master
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Check if image with sha tag already exists
        id: check-image
        run: |
          set -e
          SHA_IMAGE=$(docker images -q ${{ env.IMAGE_NAME }}:${{ env.SHA }} || true)
          if [ -z "$SHA_IMAGE" ]; then
            echo "image_exists=false" >> $GITHUB_OUTPUT
          else
            echo "image_exists=true" >> $GITHUB_OUTPUT
          fi
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@master
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            latest
            ${{ env.SHA }}
      - name: Build and push
        uses: docker/build-push-action@master
        with:
          context: .
          file: Dockerfile.${{ inputs.IMAGE_ID }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
  
#  pull-image-mims1:
#    needs: [build-and-push-image]
#    runs-on: mims1
#    steps:
#      - name: Check out source code
#        run: |
#          docker pull ${{ needs.build-and-push-image.outputs.image }}
