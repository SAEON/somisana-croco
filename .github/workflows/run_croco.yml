name: prepare croco forcing files

on:
  workflow_call:
    inputs:
      RUN_DATE:
        description: 'time of T0 of the model run in format YYYYMMDD_HH - defined dynamically in run_ops.yml'
        required: true
        type: string
      BRANCH_REF:
        description: 'what branch are we on - defined dynamically in run_ops.yml'
        required: true
        type: string
      RUNNER_NAME:
        description: 'specify the runner name to determine what server we are running on'
        required: true
        type: string
      MODEL:
        description: 'directory name used to define the model e.g.croco_v1.3.1'
        required: true
        type: string
      DOMAIN:
        description: 'directory name used to define the domain e.g. swcape_02' 
        required: true
        type: string
      COMP:
        description: 'directory corresponding to the CROCO compilation options e.g. C01' 
        required: true
        type: string
      INP:
        description: 'directory corresponding to the CROCO run-time input options e.g. I01' 
        required: true
        type: string
      BLK:
        description: 'name of bulk forcing e.g. GFS' 
        required: true
        type: string
      FRC:
        description: 'name of forcing file (placeholder for now - I think we need it when we start including tides)' 
        required: true
        type: string
      OGCM:
        description: 'name of boundary forcing e.g. MERCATOR' 
        required: true
        type: string
      HDAYS:
        description: 'number of hindcast days (integer) from T0'
        required: true
        type: string
      FDAYS:
        description: 'number of forecast days (integer) from T0'
        required: true
        type: string

env:
  # define the directory names for this configuration
  # unfortunately it looks like you can't use vars defined here to define others i.e. you can't use {{ env.* }} inside this block, you have to use {{ inputs.* }} for each var
  BRANCH_DIR: /home/somisana/ops/${{ inputs.BRANCH_REF }}
  DATE_DIR: /home/somisana/ops/${{ inputs.BRANCH_REF }}/${{ inputs.RUN_DATE }}
  DATA_DIR: /home/somisana/ops/${{ inputs.BRANCH_REF }}/${{ inputs.RUN_DATE }}/downloaded_data
  CONFIG_DIR: /home/somisana/ops/${{ inputs.BRANCH_REF }}/${{ inputs.RUN_DATE }}/${{ inputs.DOMAIN }}/${{ inputs.MODEL }}
  RUN_NAME: ${{ inputs.COMP }}_${{ inputs.INP }}_${{ inputs.OGCM }}_${{ inputs.BLK }}

jobs:
  setup_rundir:
    runs-on: ${{ inputs.RUNNER_NAME }}
    outputs:
      SCRATCH_DIR: ${{ steps.make_dir.outputs.scratch_dir }}
    continue-on-error: true
    steps:
      - name: create the run directory
        id: make_dir
        run: |
          rm -rf ${{ env.CONFIG_DIR }}/${{ env.RUN_NAME }}  
          mkdir -p ${{ env.CONFIG_DIR }}/${{ env.RUN_NAME }}/{scratch,output,postprocess}
          chown -R :runners ${{ env.CONFIG_DIR }}/${{ env.RUN_NAME }}
          chmod -R 774 ${{ env.CONFIG_DIR }}/${{ env.RUN_NAME }}
          # output the scratch dir for use in other jobs
          echo "scratch_dir=${{ env.CONFIG_DIR }}/${{ env.RUN_NAME }}/scratch" >> $GITHUB_OUTPUT 
  
  # see if we can restart from a previous run
  get_rst:
    needs: [setup_rundir]
    runs-on: ubuntu-latest
    env:
      SCRATCH_DIR: ${{ needs.setup_rundir.outputs.SCRATCH_DIR}}
    outputs:
      MAKE_INI: ${{ steps.check_restart.outputs.make_ini }}
      RST_DATE: ${{ steps.check_restart.outputs.rst_date }}
    steps:
      - name: Try to find a suitable restart file
        id: check_restart
        run: |
          # get the run_date as an epoch time (seconds since 1970-01-01)
          run_date=${{ inputs.RUN_DATE }}
          run_date_epoch_time=$(date -d "${run_date:0:4}-${run_date:4:2}-${run_date:6:2} ${run_date:9:2}:00:00" +%s)
          # current_date gets changed iteratively in the while loop below
          current_date=${{ inputs.RUN_DATE }} 
          step_count=0
          MAX_STEPS=1 # allow option for looking further back for restart file (although if MAX_STEPS>1 we'll need to edit the .in file to look for the correct time-step!)

          while [[ $step_count -lt $MAX_STEPS ]]; do

            # Calculate previous date (6 hours back)
            # Convert the datetime to epoch time (seconds since 1970-01-01)
            epoch_time=$(date -d "${current_date:0:4}-${current_date:4:2}-${current_date:6:2} ${current_date:9:2}:00:00" +%s)
            # Subtract 6 hours in seconds (6 hours * 60 minutes * 60 seconds)
            epoch_minus_6hrs=$((epoch_time - 6 * 60 * 60))
            # update $current_date
            current_date=$(date -d "@$epoch_minus_6hrs" +%Y%m%d_%H)
            current_date_epoch_time=$(date -d "${current_date:0:4}-${current_date:4:2}-${current_date:6:2} ${current_date:9:2}:00:00" +%s)

            # restart file to look for
            rst_file="${{ env.BRANCH_DIR }}/${current_date}/${{ inputs.DOMAIN }}/${{ inputs.MODEL }}/${{ env.RUN_NAME }}/output/croco_rst.nc"

            # Check if the file exists
            if [[ -f "$rst_file" ]]; then
              echo "restart file found at: $rst_file"
              echo "linking to ${{ env.SCRATCH_DIR }}/croco_ini.nc"
              ln -s $rst_file ${{ env.SCRATCH_DIR }}/croco_ini.nc
              # compute the seconds between run_date and current_date - this is needed to edit the .ini file so we initialise from the correct time-step in the restart file
              rst_offset_seconds=$((run_date_epoch_time - current_date_epoch_time))

              # Exit the loop since the restart file is found
              break
            else
              echo "restart file not found: $rst_file"
              step_count=$((step_count + 1))
            fi
          done

          if [[ $step_count -eq $MAX_STEPS ]]; then
            echo "using ${{ inputs.OGCM }} to interpolate initial conditions"
            echo "make_ini=1" >> $GITHUB_OUTPUT
            echo "rst_date=NA" >> $GITHUB_OUTPUT 
          else
            echo "make_ini=0" >> $GITHUB_OUTPUT
            echo "rst_date=$current_date" >> $GITHUB_OUTPUT
            echo "rst_offset_seconds=$rst_offset_seconds" >> $GITHUB_OUTPUT
          fi
  
  # make the boundary forcing          
  get_ogcm:
    needs: [setup_rundir,get_rst]
    runs-on: ${{ inputs.RUNNER_NAME }}
    env:
      SCRATCH_DIR: ${{ needs.setup_rundir.outputs.SCRATCH_DIR}}
      make_ini: ${{ needs.get_rst.outputs.MAKE_INI}} 
    steps:
      - name: make temporary directory for the reformatted OGCM file
        # fyi this is not needed for the blk files as the reformated blk file is saved in the directory where the data are downloaded
        run: |
          rm -rf ${{ env.CONFIG_DIR }}/${{ inputs.OGCM }}/tmp_for_croco
          mkdir -p ${{ env.CONFIG_DIR }}/${{ inputs.OGCM }}/tmp_for_croco
          chown -R :runners ${{ env.CONFIG_DIR }}/${{ inputs.OGCM }}/tmp_for_croco
          chmod -R 774 ${{ env.CONFIG_DIR }}/${{ inputs.OGCM }}/tmp_for_croco

      # consider writing a *.env file as part of the OGCM download process so we don't have to pass make_${OGCM}_ocims.m any input arguments, like it's done with GFS?
      - name: Format RUN_DATE
        id: format_date
        run: |
          run_date=${{ inputs.RUN_DATE }}
          run_date_formatted="'${run_date:0:4}-${run_date:4:2}-${run_date:6:2} ${run_date:9:2}'"
          echo "value=$run_date_formatted" >> $GITHUB_OUTPUT
      - name: generate the OGCM forcing file (and ini file if restart file is not available)
        id: make_ogcm_file
        run: >-
          docker run \
            --rm \
            --mac-address 02:42:ff:ff:ff:ff \
            --entrypoint /bin/bash \
            -v /opt/licenses/matlab-r2022a/license.lic:/licenses/license.lic \
            -v ${{ env.DATE_DIR }}:/home/matlab/somisana \
            -e MLM_LICENSE_FILE=/licenses/license.lic \
            ghcr.io/saeon/somisana-croco_matlab_${{ inputs.BRANCH_REF }}:latest \
              -c "cd /home/matlab/somisana/${{ inputs.DOMAIN }}/${{ inputs.MODEL }}/${{ inputs.OGCM }} && matlab -nodisplay -nosplash -nodesktop -r \"start; make_${{ inputs.OGCM }}_ocims(${{ steps.format_date.outputs.value }},${{ inputs.HDAYS }},${{ env.make_ini }}); exit;\""
      - name: link OGCM file to scratch dir
        run: |
          ogcm_file="${{ env.CONFIG_DIR }}/${{ inputs.OGCM }}/croco_clm_${{ inputs.OGCM }}_${{ inputs.RUN_DATE }}.nc"
          ln -s ${ogcm_file} ${{ env.SCRATCH_DIR }}/croco_clm.nc
      - name: link ini file to scratch dir, if made from OGCM
        run: |
          ini_file="${{ env.CONFIG_DIR }}/${{ inputs.OGCM }}/croco_ini_${{ inputs.OGCM }}_${{ inputs.RUN_DATE }}.nc"
          if [[ -f "$ini_file" ]]; then
            ln -s ${ini_file} ${{ env.SCRATCH_DIR }}/croco_ini.nc
          fi

  # make the surface forcing
  get_blk:
    needs: [setup_rundir]
    env:
      SCRATCH_DIR: ${{ needs.setup_rundir.outputs.SCRATCH_DIR}}
    runs-on: ${{ inputs.RUNNER_NAME }}
    steps:
      - name: generate the BLK forcing file
        id: make_blk_file
        run: >-
          docker run \
            --rm \
            --mac-address 02:42:ff:ff:ff:ff \
            --entrypoint /bin/bash \
            -v /opt/licenses/matlab-r2022a/license.lic:/licenses/license.lic \
            -v ${{ env.DATE_DIR }}:/home/matlab/somisana \
            -e MLM_LICENSE_FILE=/licenses/license.lic \
            ghcr.io/saeon/somisana-croco_matlab_${{ inputs.BRANCH_REF }}:latest \
              -c "cd /home/matlab/somisana/${{ inputs.DOMAIN }}/${{ inputs.MODEL }}/${{ inputs.BLK }} && matlab -nodisplay -nosplash -nodesktop -r \"start; make_${{ inputs.BLK }}_ocims; exit;\""
      - name: link BLK file to scratch dir
        run: |
          blk_file="${{ env.CONFIG_DIR }}/${{ inputs.BLK }}/croco_blk_${{ inputs.BLK }}_${{ inputs.RUN_DATE }}.nc"
          ln -s ${blk_file} ${{ env.SCRATCH_DIR }}/croco_blk.nc
  
#  # get the runtime input file        
#  get_inp:
#    needs: [setup_rundir]
#    env:
#      SCRATCH_DIR: ${{ needs.setup_rundir.outputs.SCRATCH_DIR}}
#    runs-on: ${{ inputs.RUNNER_NAME }}
#    steps:
#      - name: get the runtime input file
#        run: |
#          in_file="${{ env.CONFIG_DIR }}/${{ inputs.INP }}/croco_fcst.in"
#          cp ${in_file} ${{ env.SCRATCH_DIR }}/croco.in
#          # HERE I HAVE TO DO SED REPLACEMENT ON PLACEHOLDERS - STILL NEED TO DESIGN croco_fcst.in
#
# compile the code (no dependencies needed)
#
# run the model
# 
# do the postprocessing and copying to a thredds (or other) server
#
#
